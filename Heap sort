//1. Create heap by using heapify.
//2. Delete the root and heapify to maintain the max heap.
//3. Continue step 2 until the tree becomes empty.
#include <stdio.h>

void heapify(int arr[], int n, int i)
{
   int largest = i;
   int l = 2*i + 1;
   int r = 2*i + 2;

   if (l < n && arr[l] > arr[largest])
     largest = l;

   if (r < n && arr[r] > arr[largest])
     largest = r;

   if (largest != i)
   {
     swap(&arr[i], &arr[largest]);
     heapify(arr, n, largest);
   }
}

void heapSort(int arr[], int n)
{
   for (int i = n / 2 - 1; i >= 0; i--)
     heapify(arr, n, i);

   for (int i=n-1; i>=0; i--)
   {
     swap(&arr[0], &arr[i]);
     heapify(arr, i, 0);
   }
}

void printArray(int array[], int size)
{
  for (int i = 0; i < size; ++i)
  {
    printf("%d  ", array[i]);
  }
  printf("\n");
}

void swap(int *a, int *b)
{
  int t = *a;
  *a = *b;
  *b = t;
}

int main()
{
   int arr[] = {1,12,9,5,6,10};
   int n = sizeof(arr)/sizeof(arr[0]);
   heapSort(arr, n);

   printf("Sorted array is \n");
   printArray(arr, n);
}
